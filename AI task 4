import tkinter as tk
import math

# === Movie data: movie title -> list of tags ===
movie_data = {
    "Inception": ["sci-fi", "thriller", "mind-bending"],
    "Titanic": ["romance", "drama", "historical", "tragedy"],
    "Avatar": ["sci-fi", "fantasy", "alien", "action"],
    "The Matrix": ["sci-fi", "action", "virtual reality"],
    "Interstellar": ["sci-fi", "space", "drama", "time"],
    "The Notebook": ["romance", "drama", "love"],
    "Avengers": ["superhero", "action", "team", "marvel"],
    "Iron Man": ["superhero", "technology", "action"],
    "Captain America": ["superhero", "action", "war"],
    "Black Panther": ["superhero", "africa", "action"],
    "Doctor Strange": ["magic", "sci-fi", "superhero"],
    "Thor": ["fantasy", "action", "god", "superhero"],
    "The Dark Knight": ["action", "thriller", "dc", "superhero"],
    "Joker": ["drama", "crime", "psychological"],
    "Gladiator": ["action", "drama", "historical", "epic"],
    "Braveheart": ["war", "historical", "drama"],
    "The Shawshank Redemption": ["drama", "prison", "hope"],
    "Forrest Gump": ["drama", "life", "romance"],
    "Fight Club": ["psychological", "thriller", "crime"],
    "The Prestige": ["magic", "drama", "thriller"],
}

# === Content-based filtering functions ===

def build_vector(tags, all_tags):
    return [1 if tag in tags else 0 for tag in all_tags]

def cosine_similarity(vec1, vec2):
    dot = sum(a*b for a, b in zip(vec1, vec2))
    norm1 = math.sqrt(sum(a*a for a in vec1))
    norm2 = math.sqrt(sum(b*b for b in vec2))
    return dot / (norm1 * norm2) if norm1 and norm2 else 0

def recommend_movies(movie_name, top_n=15):
    movie_name = movie_name.strip()
    if movie_name not in movie_data:
        return []

    all_tags = sorted(set(tag for tags in movie_data.values() for tag in tags))
    base_vector = build_vector(movie_data[movie_name], all_tags)

    similarities = []
    for other, tags in movie_data.items():
        if other == movie_name:
            continue
        other_vector = build_vector(tags, all_tags)
        sim = cosine_similarity(base_vector, other_vector)
        similarities.append((sim, other))

    similarities.sort(reverse=True)
    return similarities[:top_n]

# === Tkinter GUI ===

def on_recommend():
    movie = entry.get().strip()
    results = recommend_movies(movie, 15)
    result_box.delete("1.0", tk.END)

    if not results:
        result_box.insert(tk.END, f"Movie '{movie}' not found or no recommendations.")
    else:
        result_box.insert(tk.END, f"Top 15 recommendations for '{movie}':\n\n")
        for sim, title in results:
            result_box.insert(tk.END, f"{title} (Similarity: {sim:.2f})\n")

# GUI setup
root = tk.Tk()
root.title("Movie Recommendation System (Top 15)")

tk.Label(root, text="Enter Movie Name:").pack(pady=5)
entry = tk.Entry(root, width=50)
entry.pack(pady=5)

tk.Button(root, text="Get Recommendations", command=on_recommend).pack(pady=5)

result_box = tk.Text(root, width=70, height=15)
result_box.pack(pady=10)

root.mainloop()

